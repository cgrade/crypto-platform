"use client";

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import Modal from '@/components/ui/Modal';
import { useRouter } from 'next/navigation';

interface Crypto {
  id: string;
  symbol: string;
  name: string;
  image: string;
  current_price: number;
  price_change_percentage_24h: number;
}

export default function PortfolioPage() {
  const router = useRouter();
  const [isDepositModalOpen, setIsDepositModalOpen] = useState(false);
  const [isWithdrawModalOpen, setIsWithdrawModalOpen] = useState(false);
  const [depositForm, setDepositForm] = useState({
    amount: '',
    cryptoType: 'BTC',
    cryptoAddress: ''
  });
  const [withdrawForm, setWithdrawForm] = useState({
    amount: '',
    cryptoType: 'BTC',
    cryptoAddress: ''
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiResponse, setApiResponse] = useState<{ success?: boolean; message?: string }>({});
  const [cryptoPrices, setCryptoPrices] = useState<{
    BTC: number;
  }>({ BTC: 0 });
  const [isLoadingPrices, setIsLoadingPrices] = useState(true);
  
  // Sample portfolio data
  const [portfolio, setPortfolio] = useState([
    { id: 1, asset: 'BTC', balance: 0.78, price: 45000, value: 35100, change24h: 2.5 }
  ]);
  
  // Fetch real-time crypto prices from CoinGecko API
  useEffect(() => {
    const fetchCryptoPrices = async () => {
      try {
        setIsLoadingPrices(true);
        const response = await fetch(
          "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin&order=market_cap_desc&per_page=1&page=1&sparkline=false&price_change_percentage=24h"
        );
        
        if (!response.ok) {
          throw new Error("Failed to fetch crypto prices");
        }
        
        const data: Crypto[] = await response.json();
        const btcData = data.find(crypto => crypto.id === 'bitcoin');
        
        if (btcData) {
          setCryptoPrices({
            BTC: btcData.current_price
          });
          
          // Update portfolio with latest prices
          setPortfolio(prev => prev.map(item => {
            if (item.asset === 'BTC') {
              return {
                ...item,
                price: btcData.current_price,
                value: item.balance * btcData.current_price,
                change24h: btcData.price_change_percentage_24h
              };
            }
            return item;
          }));
        }
      } catch (error) {
        console.error("Error fetching crypto prices:", error);
        // Set fallback prices in case of API failure
        setCryptoPrices({
          BTC: 45000
        });
      } finally {
        setIsLoadingPrices(false);
      }
    };
    
    fetchCryptoPrices();
    
    // Refresh prices every 60 seconds
    const intervalId = setInterval(fetchCryptoPrices, 60000);
    
    return () => clearInterval(intervalId);
  }, []);
  
  const handleDepositChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setDepositForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleWithdrawChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setWithdrawForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const validateDepositForm = () => {
    const errors: Record<string, string> = {};
    
    if (!depositForm.amount) {
      errors.amount = 'Amount is required';
    } else if (isNaN(Number(depositForm.amount)) || Number(depositForm.amount) <= 0) {
      errors.amount = 'Please enter a valid positive number';
    }
    
    if (!depositForm.cryptoAddress) {
      errors.cryptoAddress = 'Crypto address is required';
    } else {
      // Basic validation for crypto addresses (simplified for demonstration)
      if (depositForm.cryptoType === 'BTC' && !depositForm.cryptoAddress.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {
        errors.cryptoAddress = 'Invalid Bitcoin address format';
      }
      }
    }
    
    return errors;
  };

  // Validate deposit form
  const validateDepositForm = () => {
    const errors: Record<string, string> = {};
    
    if (!depositForm.amount) {
      errors.amount = 'Amount is required';
    } else if (isNaN(Number(depositForm.amount)) || Number(depositForm.amount) <= 0) {
      errors.amount = 'Please enter a valid positive number';
    }
    
    if (!depositForm.cryptoAddress) {
      errors.cryptoAddress = 'Crypto address is required';
    } else {
      // Basic validation for crypto addresses
      if (depositForm.cryptoType === 'BTC' && !depositForm.cryptoAddress.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {
        errors.cryptoAddress = 'Invalid Bitcoin address format';
      }
    }
    
    return errors;
  };

  const validateWithdrawForm = () => {
    const errors: Record<string, string> = {};
    
    if (!withdrawForm.amount) {
      errors.amount = 'Amount is required';
    } else if (isNaN(Number(withdrawForm.amount)) || Number(withdrawForm.amount) <= 0) {
      errors.amount = 'Please enter a valid positive number';
    } else {
      // Check if user has enough balance
      const asset = portfolio.find(item => item.asset === withdrawForm.cryptoType);
      if (asset && Number(withdrawForm.amount) > asset.balance) {
        errors.amount = `Insufficient ${withdrawForm.cryptoType} balance`;
      }
    }
    
    if (!withdrawForm.cryptoAddress) {
      errors.cryptoAddress = 'Crypto address is required';
    } else {
      // Basic validation for crypto addresses (simplified for demonstration)
      if (withdrawForm.cryptoType === 'BTC' && !withdrawForm.cryptoAddress.match(/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/)) {
        errors.cryptoAddress = 'Invalid Bitcoin address format';
      }
    }
    
    return errors;
  };

  const handleDepositSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const errors = validateDepositForm();
    setFormErrors(errors);
    
    if (Object.keys(errors).length === 0) {
      setIsSubmitting(true);
      setApiResponse({});
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Simulated success response
        setApiResponse({
          success: true,
          message: `Deposit request for ${depositForm.amount} ${depositForm.cryptoType} has been created successfully.`
        });
        
        // Reset form
        setDepositForm({
          amount: '',
          cryptoType: 'BTC',
          cryptoAddress: ''
        });
      } catch (error) {
        console.error('Error submitting deposit:', error);
        setApiResponse({
          success: false,
          message: 'Failed to process deposit. Please try again.'
        });
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleWithdrawSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const errors = validateWithdrawForm();
    setFormErrors(errors);
    
    if (Object.keys(errors).length === 0) {
      setIsSubmitting(true);
      setApiResponse({});
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Simulated success response
        setApiResponse({
          success: true,
          message: `Withdrawal request for ${withdrawForm.amount} ${withdrawForm.cryptoType} to ${withdrawForm.cryptoAddress} has been submitted for processing.`
        });
        
        // Reset form
        setWithdrawForm({
          amount: '',
          cryptoType: 'BTC',
          cryptoAddress: ''
        });
      } catch (error) {
        console.error('Error submitting withdrawal:', error);
        setApiResponse({
          success: false,
          message: 'Failed to process withdrawal. Please try again.'
        });
      } finally {
        setIsSubmitting(false);
      }
    }
  };
  
  // Calculate total portfolio value
  const totalPortfolioValue = portfolio.reduce((sum, asset) => sum + asset.value, 0);
  
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-white">Portfolio</h1>
          <p className="text-gray-400">Manage your crypto assets</p>
        </div>
        <div className="flex space-x-4">
          <Button onClick={() => {
            setIsDepositModalOpen(true);
            setApiResponse({});
            setFormErrors({});
          }}>
            Deposit
          </Button>
          <Button variant="outline" onClick={() => {
            setIsWithdrawModalOpen(true);
            setApiResponse({});
            setFormErrors({});
          }}>
            Withdraw
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-dark-200 p-6 rounded-xl">
          <div className="text-sm text-gray-400 mb-1">Total Portfolio Value</div>
          <div className="text-2xl font-bold">
            {isLoadingPrices ? (
              <div className="animate-pulse h-8 w-32 bg-dark-100 rounded"></div>
            ) : (
              `$${totalPortfolioValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`
            )}
          </div>
        </div>
        
        <div className="bg-dark-200 p-6 rounded-xl">
          <div className="text-sm text-gray-400 mb-1">Bitcoin Price</div>
          <div className="text-2xl font-bold">
            {isLoadingPrices ? (
              <div className="animate-pulse h-8 w-32 bg-dark-100 rounded"></div>
            ) : (
              `$${cryptoPrices.BTC.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`
            )}
          </div>
        </div>
        
        <div className="bg-dark-200 p-6 rounded-xl">
          <div className="text-sm text-gray-400 mb-1">24h Change</div>
          <div className="text-2xl font-bold">
            {isLoadingPrices ? (
              <div className="animate-pulse h-8 w-32 bg-dark-100 rounded"></div>
            ) : (
              <span className={portfolio.find(item => item.asset === 'BTC')?.change24h && portfolio.find(item => item.asset === 'BTC')!.change24h >= 0 ? 'text-green-500' : 'text-red-500'}>
                {portfolio.find(item => item.asset === 'BTC')?.change24h 
                  ? `${portfolio.find(item => item.asset === 'BTC')!.change24h > 0 ? '+' : ''}${portfolio.find(item => item.asset === 'BTC')!.change24h.toFixed(2)}%` 
                  : '0.00%'
                }
              </span>
            )}
          </div>
        </div>
        
        <div className="bg-dark-200 p-6 rounded-xl">
          <div className="text-sm text-gray-400 mb-1">Assets</div>
          <div className="text-2xl font-bold">{portfolio.length}</div>
        </div>
      </div>
      
      <div className="bg-dark-200 rounded-xl overflow-hidden">
        <div className="p-6 border-b border-dark-100">
          <h2 className="text-lg font-semibold">Your Assets</h2>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <thead>
              <tr className="bg-dark-100">
                <th className="text-left text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">Asset</th>
                <th className="text-right text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">Balance</th>
                <th className="text-right text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">Price</th>
                <th className="text-right text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">Value</th>
                <th className="text-right text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">24h Change</th>
                <th className="text-right text-xs font-medium text-gray-400 uppercase tracking-wider px-6 py-3">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-dark-100">
              {isLoadingPrices ? (
                Array(2).fill(0).map((_, index) => (
                  <tr key={index}>
                    <td className="px-6 py-4">
                      <div className="animate-pulse h-6 w-20 bg-dark-100 rounded"></div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="animate-pulse h-6 w-16 bg-dark-100 rounded ml-auto"></div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="animate-pulse h-6 w-20 bg-dark-100 rounded ml-auto"></div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="animate-pulse h-6 w-24 bg-dark-100 rounded ml-auto"></div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="animate-pulse h-6 w-16 bg-dark-100 rounded ml-auto"></div>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="animate-pulse h-8 w-28 bg-dark-100 rounded ml-auto"></div>
                    </td>
                  </tr>
                ))
              ) : (
                portfolio.map(asset => (
                  <tr key={asset.id} className="hover:bg-dark-100/50">
                    <td className="px-6 py-4">
                      <div className="flex items-center">
                        <div className="h-8 w-8 rounded-full bg-gradient-to-r from-primary-500 to-primary-700 flex items-center justify-center text-white font-bold">
                          ₿
                        </div>
                        <div className="ml-3">
                          <div className="font-medium">Bitcoin</div>
                          <div className="text-sm text-gray-400">{asset.asset}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 text-right font-medium">
                      {asset.balance.toLocaleString(undefined, { minimumFractionDigits: asset.asset === 'BTC' ? 8 : 2, maximumFractionDigits: asset.asset === 'BTC' ? 8 : 2 })}
                    </td>
                    <td className="px-6 py-4 text-right">
                      ${asset.price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                    </td>
                    <td className="px-6 py-4 text-right font-medium">
                      ${asset.value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                    </td>
                    <td className="px-6 py-4 text-right">
                      <span className={asset.change24h >= 0 ? 'text-green-500' : 'text-red-500'}>
                        {asset.change24h > 0 ? '+' : ''}{asset.change24h.toFixed(2)}%
                      </span>
                    </td>
                    <td className="px-6 py-4 text-right">
                      <div className="flex justify-end space-x-2">
                        <button className="px-2 py-1 text-xs font-medium text-green-500 hover:text-green-400 border border-green-500 hover:border-green-400 rounded">
                          Buy
                        </button>
                        <button className="px-2 py-1 text-xs font-medium text-red-500 hover:text-red-400 border border-red-500 hover:border-red-400 rounded">
                          Sell
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Deposit Modal */}
      <Modal
        isOpen={isDepositModalOpen}
        title="Deposit Funds"
        onClose={() => setIsDepositModalOpen(false)}
        footer={
          <div className="flex justify-end gap-2">
            <Button variant="ghost" onClick={() => setIsDepositModalOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button onClick={handleDepositSubmit} disabled={isSubmitting}>
              {isSubmitting ? 'Processing...' : 'Deposit'}
            </Button>
          </div>
        }
      >
        {apiResponse.message ? (
          <div className={`p-4 rounded-lg mb-4 ${apiResponse.success ? 'bg-green-900/30 text-green-500' : 'bg-red-900/30 text-red-500'}`}>
            {apiResponse.message}
          </div>
        ) : (
          <form className="space-y-4">
            <div>
              <label htmlFor="amount" className="block text-sm font-medium text-gray-300 mb-1">
                Amount
              </label>
              <input
                id="amount"
                name="amount"
                type="text"
                className={`input w-full ${formErrors.amount ? 'border-red-500' : ''}`}
                placeholder="0.00"
                value={depositForm.amount}
                onChange={handleDepositChange}
                disabled={isSubmitting}
              />
              {formErrors.amount && <p className="mt-1 text-xs text-red-500">{formErrors.amount}</p>}
            </div>
            
            <div>
              <label htmlFor="cryptoType" className="block text-sm font-medium text-gray-300 mb-1">
                Select Cryptocurrency
              </label>
              <select
                id="cryptoType"
                name="cryptoType"
                className={`input w-full ${formErrors.cryptoType ? 'border-red-500' : ''}`}
                value={depositForm.cryptoType}
                onChange={handleDepositChange}
                disabled={isSubmitting}
              >
                <option value="BTC">Bitcoin (BTC) - ${cryptoPrices.BTC.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</option>
              </select>
              {formErrors.cryptoType && <p className="mt-1 text-xs text-red-500">{formErrors.cryptoType}</p>}
            </div>
            
            <div>
              <label htmlFor="cryptoAddress" className="block text-sm font-medium text-gray-300 mb-1">
                Your {depositForm.cryptoType} Address
              </label>
              <input
                id="cryptoAddress"
                name="cryptoAddress"
                type="text"
                className={`input w-full ${formErrors.cryptoAddress ? 'border-red-500' : ''}`}
                placeholder={`Enter your ${depositForm.cryptoType} address`}
                value={depositForm.cryptoAddress}
                onChange={handleDepositChange}
                disabled={isSubmitting}
              />
              {formErrors.cryptoAddress && <p className="mt-1 text-xs text-red-500">{formErrors.cryptoAddress}</p>}
              <p className="mt-1 text-xs text-gray-400">
                Please ensure you have entered the correct address. We cannot recover funds sent to incorrect addresses.
              </p>
            </div>
          </form>
        )}
      </Modal>

      {/* Withdraw Modal */}
      <Modal
        isOpen={isWithdrawModalOpen}
        title="Withdraw Funds"
        onClose={() => setIsWithdrawModalOpen(false)}
        footer={
          <div className="flex justify-end gap-2">
            <Button variant="ghost" onClick={() => setIsWithdrawModalOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button onClick={handleWithdrawSubmit} disabled={isSubmitting}>
              {isSubmitting ? 'Processing...' : 'Withdraw'}
            </Button>
          </div>
        }
      >
        {apiResponse.message ? (
          <div className={`p-4 rounded-lg mb-4 ${apiResponse.success ? 'bg-green-900/30 text-green-500' : 'bg-red-900/30 text-red-500'}`}>
            {apiResponse.message}
          </div>
        ) : (
          <form className="space-y-4">
            <div>
              <label htmlFor="amount" className="block text-sm font-medium text-gray-300 mb-1">
                Amount
              </label>
              <input
                id="amount"
                name="amount"
                type="text"
                className={`input w-full ${formErrors.amount ? 'border-red-500' : ''}`}
                placeholder="0.00"
                value={withdrawForm.amount}
                onChange={handleWithdrawChange}
                disabled={isSubmitting}
              />
              {formErrors.amount && <p className="mt-1 text-xs text-red-500">{formErrors.amount}</p>}
            </div>
            
            <div>
              <label htmlFor="cryptoType" className="block text-sm font-medium text-gray-300 mb-1">
                Select Cryptocurrency
              </label>
              <select
                id="cryptoType"
                name="cryptoType"
                className={`input w-full ${formErrors.cryptoType ? 'border-red-500' : ''}`}
                value={withdrawForm.cryptoType}
                onChange={handleWithdrawChange}
                disabled={isSubmitting}
              >
                <option value="BTC">Bitcoin (BTC) - ${cryptoPrices.BTC.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</option>
              </select>
              {formErrors.cryptoType && <p className="mt-1 text-xs text-red-500">{formErrors.cryptoType}</p>}
            </div>
            
            <div>
              <label htmlFor="cryptoAddress" className="block text-sm font-medium text-gray-300 mb-1">
                Destination {withdrawForm.cryptoType} Address
              </label>
              <input
                id="cryptoAddress"
                name="cryptoAddress"
                type="text"
                className={`input w-full ${formErrors.cryptoAddress ? 'border-red-500' : ''}`}
                placeholder={`Enter destination ${withdrawForm.cryptoType} address`}
                value={withdrawForm.cryptoAddress}
                onChange={handleWithdrawChange}
                disabled={isSubmitting}
              />
              {formErrors.cryptoAddress && <p className="mt-1 text-xs text-red-500">{formErrors.cryptoAddress}</p>}
              <p className="mt-1 text-xs text-gray-400">
                Please double-check the address. We cannot recover funds sent to incorrect addresses.
              </p>
            </div>
          </form>
        )}
      </Modal>
    </div>
  );
}
