// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  password         String
  image            String?
  role             Role          @default(USER)
  btcAddress       String?
  btcAddressQrCode String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  portfolios       Portfolio[]
  transactions     Transaction[]
  accounts         Account[]
  sessions         Session[]
}

// Role Enum
enum Role {
  USER
  ADMIN
}

// Account Model for OAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Transaction Model
model Transaction {
  id            String          @id @default(cuid())
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  cryptoType    CryptoType
  cryptoAddress String?
  txHash        String?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
}

// Transaction Type Enum
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

// Transaction Status Enum
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// Crypto Type Enum
enum CryptoType {
  BTC
}

// Portfolio Model
model Portfolio {
  id          String        @id @default(cuid())
  userId      String
  totalValue  Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assets      CryptoAsset[]
  user        User          @relation(fields: [userId], references: [id])
}

// Crypto Asset Model
model CryptoAsset {
  id          String   @id @default(cuid())
  symbol      String
  name        String
  amount      Float
  frozen      Float    @default(0) // Amount reserved for pending withdrawals
  lastPrice   Float    @default(0)
  portfolioId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}