"use client";

import React, { ReactNode, useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import Image from 'next/image';
import { useSession } from 'next-auth/react';
import { Button } from '../ui/Button';
import { LogoutButton } from '../ui/LogoutButton';

interface SidebarItemProps {
  icon: React.ReactNode;
  label: string;
  href: string;
  active?: boolean;
}

const SidebarItem: React.FC<SidebarItemProps> = ({ icon, label, href, active = false }) => {
  return (
    <Link href={href}>
      <div className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-colors ${active ? 'bg-primary-500/20 text-primary-500' : 'text-gray-400 hover:bg-dark-100 hover:text-white'}`}>
        <span className="text-lg">{icon}</span>
        <span className="font-medium">{label}</span>
      </div>
    </Link>
  );
};

interface DashboardLayoutProps {
  children: ReactNode;
  activeTab?: string;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children, activeTab = 'portfolio' }) => {
  const { data: session } = useSession();
  const [isClient, setIsClient] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [canGoBack, setCanGoBack] = useState(false);
  const sidebarRef = useRef<HTMLElement>(null);
  
  // Close sidebar when clicking outside on mobile
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (sidebarRef.current && !sidebarRef.current.contains(event.target as Node) && isMobileMenuOpen) {
        setIsMobileMenuOpen(false);
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isMobileMenuOpen]);
  
  useEffect(() => {
    setIsClient(true);
    // Check if navigation back is possible
    setCanGoBack(window.history.length > 1);
    
    // Prevent body scroll when mobile menu is open
    if (isMobileMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMobileMenuOpen]);
  
  // Simple loading state for pre-hydration rendering
  if (!isClient) {
    return (
      <div className="min-h-screen bg-dark-300 flex items-center justify-center">
        <div className="animate-pulse space-y-4 p-6 max-w-md mx-auto">
          <div className="h-6 bg-dark-200 rounded w-3/4"></div>
          <div className="h-40 bg-dark-200 rounded"></div>
          <div className="h-screen bg-dark-200 rounded"></div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-dark-300 text-white">
      {/* Dashboard Header */}
      <header className="bg-dark-200 border-b border-dark-100 h-16 fixed top-0 left-0 right-0 z-40 shadow-md">
        <div className="h-full px-4 flex items-center justify-between">
          <div className="flex flex-col items-start">
            <div className="flex items-center gap-2">
              {/* Hamburger menu for mobile */}
              <button 
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)} 
                className="md:hidden text-gray-400 hover:text-white transition-colors duration-200 p-1 rounded-md hover:bg-dark-100 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50"
                aria-label="Toggle mobile menu">
                {isMobileMenuOpen ? (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                  </svg>
                )}
              </button>
              
              <Link href="/dashboard" className="flex items-center gap-2">
                <Image 
                  src="/images/logo.png" 
                  alt="CryptoPro Logo" 
                  width={32} 
                  height={32} 
                  className="rounded-full" 
                />
                <span className="text-white font-bold text-lg xs:text-xl hidden xs:inline">CryptoPro</span>
              </Link>
            </div>
            
            {/* Back button positioned below the logo */}
            {canGoBack && (
              <button 
                onClick={() => window.history.back()} 
                className="text-gray-400 hover:text-white flex items-center gap-1 mt-1 ml-1 text-xs transition-colors duration-200"
                aria-label="Go back">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                <span className="text-xs">Back</span>
              </button>
            )}
          </div>
          
          <div className="flex items-center gap-3">
            <div className="relative">
              <button className="text-gray-400 hover:text-white transition-colors duration-200 p-1.5 rounded-md hover:bg-dark-100 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50" aria-label="Notifications">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              </button>
              <span className="absolute -top-1 -right-1 bg-primary-500 text-xs w-4 h-4 flex items-center justify-center rounded-full">3</span>
            </div>
            
            <Link href="/dashboard/profile" className="flex items-center gap-2 border-l border-dark-100 pl-3 py-1.5 px-2 rounded-md hover:bg-dark-100 transition-colors duration-200" aria-label="Profile settings">
              <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-primary-500 flex items-center justify-center text-white font-bold shadow-sm">
                {session?.user?.name?.charAt(0) || 'U'}
              </div>
              <div className="hidden xs:block max-w-[120px] sm:max-w-none">
                <div className="text-sm font-medium truncate">{session?.user?.name || 'User'}</div>
                <div className="text-xs text-gray-400 truncate">{session?.user?.email || ''}</div>
              </div>
            </Link>
          </div>
        </div>
      </header>
      
      {/* Dashboard Content */}
      <div className="pt-16 flex relative">
        {/* Sidebar - Desktop (md+) and Mobile (when open) */}
        <aside 
          ref={sidebarRef}
          className={`transition-transform duration-300 ${isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'} md:block w-72 sm:w-64 fixed h-[calc(100vh-4rem)] border-r border-dark-100 p-5 md:p-4 overflow-y-auto bg-dark-200 md:bg-transparent z-30 shadow-lg md:shadow-none`}>
          <nav className="space-y-1">
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
              </svg>} 
              label="Dashboard" 
              href="/dashboard" 
              active={activeTab === 'dashboard'} 
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>} 
              label="Portfolio" 
              href="/dashboard/portfolio" 
              active={activeTab === 'portfolio'} 
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>} 
              label="Deposit" 
              href="/dashboard/deposit" 
              active={activeTab === 'deposit'} 
            />
            <SidebarItem 
              icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
              </svg>} 
              label="Withdraw" 
              href="/dashboard/withdraw" 
              active={activeTab === 'withdraw'} 
            />
          </nav>
          
          <div className="mt-8">
            <div className="text-xs font-semibold uppercase tracking-wider text-gray-400 mb-3">
              Settings
            </div>
            <nav className="space-y-1">
              <SidebarItem 
                icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>} 
                label="Profile" 
                href="/dashboard/profile" 
                active={activeTab === 'profile'} 
              />
              <SidebarItem 
                icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>} 
                label="Help" 
                href="/dashboard/help" 
                active={activeTab === 'help'} 
              />
            </nav>
          </div>
          
          {/* Admin section */}
          {session?.user?.role === 'ADMIN' && (
            <div className="mt-8">
              <div className="text-xs font-semibold uppercase tracking-wider text-primary-500 mb-3">
                Admin Area
              </div>
              <nav className="space-y-1">
                <SidebarItem 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>} 
                  label="Users" 
                  href="/admin/users" 
                  active={activeTab === 'admin-users'} 
                />
                <SidebarItem 
                  icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>} 
                  label="Transactions" 
                  href="/admin/transactions" 
                  active={activeTab === 'admin-transactions'} 
                />
              </nav>
            </div>
          )}
          
          <div className="mt-auto pt-8">
            <LogoutButton variant="outline" className="w-full justify-start" />
          </div>
        </aside>
        
        {/* Mobile Sidebar Overlay */}
        <div 
          className={`fixed inset-0 bg-black transition-opacity duration-300 ${isMobileMenuOpen ? 'opacity-50 z-20' : 'opacity-0 -z-10'} md:hidden`} 
          onClick={() => setIsMobileMenuOpen(false)}
        ></div>
        
        {/* Main Content */}
        <main className="flex-1 md:ml-64 px-4 py-6 md:px-8 min-h-[calc(100vh-4rem)]">
          {children}
        </main>
      </div>
    </div>
  );
};

export default DashboardLayout;
